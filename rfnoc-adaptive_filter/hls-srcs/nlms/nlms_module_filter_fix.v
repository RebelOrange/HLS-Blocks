// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nlms_module_filter_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_M_real,
        input_M_imag,
        lms_weights_real_V_2,
        lms_weights_imag_V_2,
        lms_weights_real_V_1,
        lms_weights_imag_V_1,
        lms_weights_real_V_0,
        lms_weights_imag_V_0,
        ap_return_0,
        ap_return_1,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_M_real;
input  [15:0] input_M_imag;
input  [63:0] lms_weights_real_V_2;
input  [63:0] lms_weights_imag_V_2;
input  [63:0] lms_weights_real_V_1;
input  [63:0] lms_weights_imag_V_1;
input  [63:0] lms_weights_real_V_0;
input  [63:0] lms_weights_imag_V_0;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [15:0] lms_aux_reg_M_real_V_1;
reg  signed [15:0] lms_aux_reg_M_imag_V_1;
reg  signed [15:0] lms_aux_reg_M_real_V_0;
reg  signed [15:0] lms_aux_reg_M_imag_V_0;
reg  signed [15:0] lms_aux_reg_M_imag_V_1_load_reg_958;
reg  signed [63:0] lms_weights_imag_V_2_load_reg_963;
wire  signed [79:0] sext_ln1169_fu_100_p1;
reg  signed [79:0] sext_ln1169_reg_978;
wire    ap_CS_fsm_state2;
wire  signed [79:0] sext_ln1171_fu_108_p1;
reg  signed [79:0] sext_ln1171_reg_984;
wire    ap_CS_fsm_state3;
wire   [78:0] grp_fu_90_p2;
reg   [78:0] mul_ln1171_1_reg_995;
wire   [79:0] grp_fu_112_p2;
reg   [79:0] mul_ln1171_reg_1000;
wire    ap_CS_fsm_state4;
wire   [78:0] sub_ln1171_fu_129_p2;
reg   [78:0] sub_ln1171_reg_1010;
wire   [80:0] sub_ln1246_fu_145_p2;
reg   [80:0] sub_ln1246_reg_1015;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_23_reg_1020;
reg   [0:0] tmp_24_reg_1026;
reg   [16:0] tmp_reg_1032;
wire   [79:0] grp_fu_121_p2;
reg   [79:0] mul_ln1171_2_reg_1038;
reg  signed [15:0] lms_aux_reg_M_imag_V_0_load_reg_1043;
reg  signed [63:0] lms_weights_imag_V_1_load_reg_1048;
wire  signed [63:0] select_ln384_3_fu_264_p3;
reg  signed [63:0] select_ln384_3_reg_1063;
wire    ap_CS_fsm_state6;
wire   [79:0] grp_fu_134_p2;
reg   [79:0] mul_ln1171_3_reg_1069;
wire  signed [79:0] sext_ln1169_1_fu_282_p1;
reg  signed [79:0] sext_ln1169_1_reg_1074;
wire  signed [79:0] sext_ln1171_1_fu_290_p1;
reg  signed [79:0] sext_ln1171_1_reg_1080;
wire   [79:0] sub_ln1245_fu_300_p2;
reg   [79:0] sub_ln1245_reg_1086;
wire    ap_CS_fsm_state7;
reg   [0:0] tmp_25_reg_1091;
reg   [0:0] tmp_26_reg_1097;
reg   [15:0] tmp_1_reg_1103;
wire   [78:0] grp_fu_199_p2;
reg   [78:0] mul_ln1171_5_reg_1114;
wire  signed [63:0] select_ln384_5_fu_397_p3;
reg  signed [63:0] select_ln384_5_reg_1119;
wire    ap_CS_fsm_state8;
wire   [79:0] grp_fu_294_p2;
reg   [79:0] mul_ln1171_4_reg_1125;
wire   [78:0] sub_ln1171_1_fu_408_p2;
reg   [78:0] sub_ln1171_1_reg_1135;
reg  signed [15:0] input_M_imag_read_reg_1140;
wire    ap_CS_fsm_state9;
wire   [80:0] sub_ln1246_1_fu_424_p2;
reg   [80:0] sub_ln1246_1_reg_1145;
wire   [63:0] trunc_ln1245_2_fu_430_p1;
reg   [63:0] trunc_ln1245_2_reg_1150;
wire   [79:0] grp_fu_333_p2;
reg   [79:0] mul_ln1171_6_reg_1155;
reg  signed [63:0] lms_weights_imag_V_0_load_reg_1160;
reg   [0:0] tmp_27_reg_1175;
wire    ap_CS_fsm_state10;
wire   [63:0] add_ln712_fu_474_p2;
reg   [63:0] add_ln712_reg_1181;
reg   [0:0] tmp_28_reg_1186;
reg   [16:0] tmp_2_reg_1192;
wire   [79:0] grp_fu_413_p2;
reg   [79:0] mul_ln1171_7_reg_1198;
wire  signed [79:0] sext_ln1169_2_fu_502_p1;
reg  signed [79:0] sext_ln1169_2_reg_1203;
wire  signed [79:0] sext_ln1171_2_fu_510_p1;
reg  signed [79:0] sext_ln1171_2_reg_1209;
wire  signed [63:0] select_ln384_1_fu_576_p3;
reg  signed [63:0] select_ln384_1_reg_1215;
wire    ap_CS_fsm_state11;
wire  signed [79:0] sub_ln1245_1_fu_583_p2;
reg  signed [79:0] sub_ln1245_1_reg_1221;
wire   [63:0] trunc_ln1245_3_fu_587_p1;
reg   [63:0] trunc_ln1245_3_reg_1226;
wire   [78:0] grp_fu_452_p2;
reg   [78:0] mul_ln1171_9_reg_1236;
reg   [0:0] tmp_29_reg_1241;
wire    ap_CS_fsm_state12;
wire   [63:0] add_ln712_1_fu_619_p2;
reg   [63:0] add_ln712_1_reg_1247;
reg   [0:0] tmp_30_reg_1252;
reg   [16:0] tmp_3_reg_1258;
wire   [79:0] grp_fu_514_p2;
reg   [79:0] mul_ln1171_8_reg_1264;
wire   [78:0] sub_ln1171_2_fu_644_p2;
reg   [78:0] sub_ln1171_2_reg_1274;
wire  signed [63:0] select_ln384_8_fu_710_p3;
reg  signed [63:0] select_ln384_8_reg_1279;
wire    ap_CS_fsm_state13;
wire   [80:0] sub_ln1246_2_fu_723_p2;
reg   [80:0] sub_ln1246_2_reg_1285;
wire   [63:0] trunc_ln1245_4_fu_729_p1;
reg   [63:0] trunc_ln1245_4_reg_1290;
wire   [79:0] grp_fu_594_p2;
reg   [79:0] mul_ln1171_10_reg_1295;
reg   [0:0] tmp_31_reg_1300;
wire    ap_CS_fsm_state14;
wire   [63:0] add_ln712_2_fu_749_p2;
reg   [63:0] add_ln712_2_reg_1306;
reg   [0:0] tmp_32_reg_1311;
reg   [16:0] tmp_4_reg_1317;
wire   [79:0] grp_fu_649_p2;
reg   [79:0] mul_ln1171_11_reg_1323;
wire   [63:0] select_ln384_10_fu_827_p3;
reg   [63:0] select_ln384_10_reg_1328;
wire    ap_CS_fsm_state15;
wire  signed [79:0] sub_ln1245_2_fu_834_p2;
reg  signed [79:0] sub_ln1245_2_reg_1333;
wire   [63:0] trunc_ln1245_5_fu_838_p1;
reg   [63:0] trunc_ln1245_5_reg_1338;
reg   [0:0] tmp_33_reg_1343;
wire    ap_CS_fsm_state16;
wire   [63:0] add_ln712_3_fu_862_p2;
reg   [63:0] add_ln712_3_reg_1349;
reg   [0:0] tmp_34_reg_1354;
reg   [16:0] tmp_5_reg_1360;
reg  signed [15:0] ap_port_reg_input_M_real;
reg  signed [15:0] ap_port_reg_input_M_imag;
wire  signed [15:0] sext_ln1169_fu_100_p0;
wire  signed [15:0] grp_fu_121_p1;
wire  signed [63:0] grp_fu_134_p0;
wire  signed [80:0] sext_ln712_fu_139_p1;
wire  signed [80:0] sext_ln1246_fu_142_p1;
wire   [0:0] icmp_ln777_fu_208_p2;
wire   [0:0] or_ln794_fu_213_p2;
wire   [0:0] xor_ln794_fu_218_p2;
wire   [0:0] icmp_ln795_fu_234_p2;
wire   [0:0] xor_ln795_fu_229_p2;
wire   [0:0] or_ln795_fu_239_p2;
wire   [0:0] and_ln794_fu_223_p2;
wire   [0:0] and_ln795_fu_245_p2;
wire   [0:0] or_ln384_fu_258_p2;
wire   [63:0] select_ln384_fu_250_p3;
wire   [63:0] trunc_ln1245_fu_205_p1;
wire  signed [15:0] sext_ln1169_1_fu_282_p0;
wire  signed [15:0] grp_fu_333_p1;
wire   [0:0] icmp_ln777_3_fu_341_p2;
wire   [0:0] or_ln794_3_fu_346_p2;
wire   [0:0] xor_ln794_10_fu_351_p2;
wire   [0:0] icmp_ln795_2_fu_367_p2;
wire   [0:0] xor_ln795_8_fu_362_p2;
wire   [0:0] or_ln795_2_fu_372_p2;
wire   [0:0] and_ln794_8_fu_356_p2;
wire   [0:0] and_ln795_10_fu_378_p2;
wire   [0:0] or_ln384_2_fu_391_p2;
wire   [63:0] select_ln384_4_fu_383_p3;
wire   [63:0] trunc_ln1245_1_fu_338_p1;
wire  signed [63:0] grp_fu_413_p0;
wire  signed [80:0] sext_ln712_2_fu_418_p1;
wire  signed [80:0] sext_ln1246_2_fu_421_p1;
wire  signed [80:0] sext_ln712_3_fu_458_p1;
wire   [80:0] add_ln1245_fu_461_p2;
wire  signed [15:0] sext_ln1169_2_fu_502_p0;
wire   [0:0] icmp_ln777_1_fu_520_p2;
wire   [0:0] or_ln794_1_fu_525_p2;
wire   [0:0] xor_ln794_1_fu_530_p2;
wire   [0:0] icmp_ln795_1_fu_546_p2;
wire   [0:0] xor_ln795_1_fu_541_p2;
wire   [0:0] or_ln795_1_fu_551_p2;
wire   [0:0] and_ln794_9_fu_535_p2;
wire   [0:0] and_ln795_11_fu_557_p2;
wire   [0:0] or_ln384_3_fu_570_p2;
wire   [63:0] select_ln384_6_fu_562_p3;
wire  signed [15:0] grp_fu_594_p1;
wire  signed [80:0] sext_ln1245_fu_602_p1;
wire  signed [80:0] sext_ln712_4_fu_599_p1;
wire   [80:0] add_ln1245_1_fu_605_p2;
wire  signed [63:0] grp_fu_649_p0;
wire   [0:0] icmp_ln777_4_fu_654_p2;
wire   [0:0] or_ln794_4_fu_659_p2;
wire   [0:0] xor_ln794_11_fu_664_p2;
wire   [0:0] icmp_ln795_3_fu_680_p2;
wire   [0:0] xor_ln795_9_fu_675_p2;
wire   [0:0] or_ln795_3_fu_685_p2;
wire   [0:0] and_ln794_10_fu_669_p2;
wire   [0:0] and_ln795_12_fu_691_p2;
wire   [0:0] or_ln384_4_fu_704_p2;
wire   [63:0] select_ln384_7_fu_696_p3;
wire  signed [80:0] sext_ln712_5_fu_717_p1;
wire  signed [80:0] sext_ln1246_3_fu_720_p1;
wire  signed [80:0] sext_ln712_6_fu_733_p1;
wire   [80:0] add_ln1245_2_fu_736_p2;
wire   [0:0] icmp_ln777_2_fu_771_p2;
wire   [0:0] or_ln794_2_fu_776_p2;
wire   [0:0] xor_ln794_2_fu_781_p2;
wire   [0:0] icmp_ln795_4_fu_797_p2;
wire   [0:0] xor_ln795_2_fu_792_p2;
wire   [0:0] or_ln795_4_fu_802_p2;
wire   [0:0] and_ln794_11_fu_786_p2;
wire   [0:0] and_ln795_13_fu_808_p2;
wire   [0:0] or_ln384_5_fu_821_p2;
wire   [63:0] select_ln384_9_fu_813_p3;
wire  signed [80:0] sext_ln1245_1_fu_845_p1;
wire  signed [80:0] sext_ln712_7_fu_842_p1;
wire   [80:0] add_ln1245_3_fu_848_p2;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln777_5_fu_884_p2;
wire   [0:0] or_ln794_5_fu_889_p2;
wire   [0:0] xor_ln794_12_fu_894_p2;
wire   [0:0] icmp_ln795_5_fu_910_p2;
wire   [0:0] xor_ln795_10_fu_905_p2;
wire   [0:0] or_ln795_5_fu_915_p2;
wire   [0:0] and_ln794_12_fu_899_p2;
wire   [0:0] and_ln795_14_fu_921_p2;
wire   [0:0] or_ln384_6_fu_934_p2;
wire   [63:0] select_ln384_11_fu_926_p3;
wire   [63:0] select_ln384_12_fu_940_p3;
reg    grp_fu_90_ce;
reg    grp_fu_112_ce;
reg    grp_fu_121_ce;
reg    grp_fu_134_ce;
reg    grp_fu_199_ce;
reg    grp_fu_294_ce;
reg    grp_fu_333_ce;
reg    grp_fu_413_ce;
reg    grp_fu_452_ce;
reg    grp_fu_514_ce;
reg    grp_fu_594_ce;
reg    grp_fu_649_ce;
reg   [16:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 lms_aux_reg_M_real_V_1 = 16'd0;
#0 lms_aux_reg_M_imag_V_1 = 16'd0;
#0 lms_aux_reg_M_real_V_0 = 16'd0;
#0 lms_aux_reg_M_imag_V_0 = 16'd0;
end

nlms_module_mul_64s_16s_79_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 79 ))
mul_64s_16s_79_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lms_weights_imag_V_2),
    .din1(lms_aux_reg_M_imag_V_1),
    .ce(grp_fu_90_ce),
    .dout(grp_fu_90_p2)
);

nlms_module_mul_64s_16s_80_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 80 ))
mul_64s_16s_80_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lms_weights_real_V_2),
    .din1(lms_aux_reg_M_real_V_1),
    .ce(grp_fu_112_ce),
    .dout(grp_fu_112_p2)
);

nlms_module_mul_64s_16s_80_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 80 ))
mul_64s_16s_80_3_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lms_weights_imag_V_2_load_reg_963),
    .din1(grp_fu_121_p1),
    .ce(grp_fu_121_ce),
    .dout(grp_fu_121_p2)
);

nlms_module_mul_64s_16s_80_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 80 ))
mul_64s_16s_80_3_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_134_p0),
    .din1(lms_aux_reg_M_imag_V_1_load_reg_958),
    .ce(grp_fu_134_ce),
    .dout(grp_fu_134_p2)
);

nlms_module_mul_64s_16s_79_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 79 ))
mul_64s_16s_79_3_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lms_weights_imag_V_1),
    .din1(lms_aux_reg_M_imag_V_0),
    .ce(grp_fu_199_ce),
    .dout(grp_fu_199_p2)
);

nlms_module_mul_64s_16s_80_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 80 ))
mul_64s_16s_80_3_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lms_weights_real_V_1),
    .din1(lms_aux_reg_M_real_V_0),
    .ce(grp_fu_294_ce),
    .dout(grp_fu_294_p2)
);

nlms_module_mul_64s_16s_80_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 80 ))
mul_64s_16s_80_3_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lms_weights_imag_V_1_load_reg_1048),
    .din1(grp_fu_333_p1),
    .ce(grp_fu_333_ce),
    .dout(grp_fu_333_p2)
);

nlms_module_mul_64s_16s_80_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 80 ))
mul_64s_16s_80_3_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_413_p0),
    .din1(lms_aux_reg_M_imag_V_0_load_reg_1043),
    .ce(grp_fu_413_ce),
    .dout(grp_fu_413_p2)
);

nlms_module_mul_64s_16s_79_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 79 ))
mul_64s_16s_79_3_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lms_weights_imag_V_0),
    .din1(ap_port_reg_input_M_imag),
    .ce(grp_fu_452_ce),
    .dout(grp_fu_452_p2)
);

nlms_module_mul_64s_16s_80_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 80 ))
mul_64s_16s_80_3_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lms_weights_real_V_0),
    .din1(ap_port_reg_input_M_real),
    .ce(grp_fu_514_ce),
    .dout(grp_fu_514_p2)
);

nlms_module_mul_64s_16s_80_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 80 ))
mul_64s_16s_80_3_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(lms_weights_imag_V_0_load_reg_1160),
    .din1(grp_fu_594_p1),
    .ce(grp_fu_594_ce),
    .dout(grp_fu_594_p2)
);

nlms_module_mul_64s_16s_80_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 80 ))
mul_64s_16s_80_3_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_649_p0),
    .din1(input_M_imag_read_reg_1140),
    .ce(grp_fu_649_ce),
    .dout(grp_fu_649_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln712_1_reg_1247 <= add_ln712_1_fu_619_p2;
        mul_ln1171_8_reg_1264 <= grp_fu_514_p2;
        sub_ln1171_2_reg_1274 <= sub_ln1171_2_fu_644_p2;
        tmp_29_reg_1241 <= add_ln1245_1_fu_605_p2[32'd80];
        tmp_30_reg_1252 <= add_ln712_1_fu_619_p2[32'd63];
        tmp_3_reg_1258 <= {{add_ln1245_1_fu_605_p2[80:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln712_2_reg_1306 <= add_ln712_2_fu_749_p2;
        mul_ln1171_11_reg_1323 <= grp_fu_649_p2;
        tmp_31_reg_1300 <= add_ln1245_2_fu_736_p2[32'd80];
        tmp_32_reg_1311 <= add_ln712_2_fu_749_p2[32'd63];
        tmp_4_reg_1317 <= {{add_ln1245_2_fu_736_p2[80:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln712_3_reg_1349 <= add_ln712_3_fu_862_p2;
        tmp_33_reg_1343 <= add_ln1245_3_fu_848_p2[32'd80];
        tmp_34_reg_1354 <= add_ln712_3_fu_862_p2[32'd63];
        tmp_5_reg_1360 <= {{add_ln1245_3_fu_848_p2[80:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln712_reg_1181 <= add_ln712_fu_474_p2;
        mul_ln1171_7_reg_1198 <= grp_fu_413_p2;
        sext_ln1169_2_reg_1203 <= sext_ln1169_2_fu_502_p1;
        sext_ln1171_2_reg_1209 <= sext_ln1171_2_fu_510_p1;
        tmp_27_reg_1175 <= add_ln1245_fu_461_p2[32'd80];
        tmp_28_reg_1186 <= add_ln712_fu_474_p2[32'd63];
        tmp_2_reg_1192 <= {{add_ln1245_fu_461_p2[80:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_port_reg_input_M_imag <= input_M_imag;
        ap_port_reg_input_M_real <= input_M_real;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_M_imag_read_reg_1140 <= ap_port_reg_input_M_imag;
        lms_weights_imag_V_0_load_reg_1160 <= lms_weights_imag_V_0;
        mul_ln1171_6_reg_1155 <= grp_fu_333_p2;
        sub_ln1246_1_reg_1145 <= sub_ln1246_1_fu_424_p2;
        trunc_ln1245_2_reg_1150 <= trunc_ln1245_2_fu_430_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9))) begin
        lms_aux_reg_M_imag_V_0 <= ap_port_reg_input_M_imag;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        lms_aux_reg_M_imag_V_0_load_reg_1043 <= lms_aux_reg_M_imag_V_0;
        lms_weights_imag_V_1_load_reg_1048 <= lms_weights_imag_V_1;
        mul_ln1171_2_reg_1038 <= grp_fu_121_p2;
        sub_ln1246_reg_1015 <= sub_ln1246_fu_145_p2;
        tmp_23_reg_1020 <= sub_ln1246_fu_145_p2[32'd80];
        tmp_24_reg_1026 <= sub_ln1246_fu_145_p2[32'd63];
        tmp_reg_1032 <= {{sub_ln1246_fu_145_p2[80:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce))) begin
        lms_aux_reg_M_imag_V_1 <= lms_aux_reg_M_imag_V_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        lms_aux_reg_M_imag_V_1_load_reg_958 <= lms_aux_reg_M_imag_V_1;
        lms_weights_imag_V_2_load_reg_963 <= lms_weights_imag_V_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10))) begin
        lms_aux_reg_M_real_V_0 <= ap_port_reg_input_M_real;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6))) begin
        lms_aux_reg_M_real_V_1 <= lms_aux_reg_M_real_V_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul_ln1171_10_reg_1295 <= grp_fu_594_p2;
        select_ln384_8_reg_1279 <= select_ln384_8_fu_710_p3;
        sub_ln1246_2_reg_1285 <= sub_ln1246_2_fu_723_p2;
        trunc_ln1245_4_reg_1290 <= trunc_ln1245_4_fu_729_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln1171_1_reg_995 <= grp_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln1171_3_reg_1069 <= grp_fu_134_p2;
        select_ln384_3_reg_1063 <= select_ln384_3_fu_264_p3;
        sext_ln1169_1_reg_1074 <= sext_ln1169_1_fu_282_p1;
        sext_ln1171_1_reg_1080 <= sext_ln1171_1_fu_290_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln1171_4_reg_1125 <= grp_fu_294_p2;
        select_ln384_5_reg_1119 <= select_ln384_5_fu_397_p3;
        sub_ln1171_1_reg_1135 <= sub_ln1171_1_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln1171_5_reg_1114 <= grp_fu_199_p2;
        sub_ln1245_reg_1086 <= sub_ln1245_fu_300_p2;
        tmp_1_reg_1103 <= {{sub_ln1245_fu_300_p2[79:64]}};
        tmp_25_reg_1091 <= sub_ln1245_fu_300_p2[32'd79];
        tmp_26_reg_1097 <= sub_ln1245_fu_300_p2[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln1171_9_reg_1236 <= grp_fu_452_p2;
        select_ln384_1_reg_1215 <= select_ln384_1_fu_576_p3;
        sub_ln1245_1_reg_1221 <= sub_ln1245_1_fu_583_p2;
        trunc_ln1245_3_reg_1226 <= trunc_ln1245_3_fu_587_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln1171_reg_1000 <= grp_fu_112_p2;
        sub_ln1171_reg_1010 <= sub_ln1171_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        select_ln384_10_reg_1328 <= select_ln384_10_fu_827_p3;
        sub_ln1245_2_reg_1333 <= sub_ln1245_2_fu_834_p2;
        trunc_ln1245_5_reg_1338 <= trunc_ln1245_5_fu_838_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln1169_reg_978 <= sext_ln1169_fu_100_p1;
        sext_ln1171_reg_984 <= sext_ln1171_fu_108_p1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_ce) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & (1'b1 == ap_ce)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_112_ce = 1'b1;
    end else begin
        grp_fu_112_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3)))) begin
        grp_fu_121_ce = 1'b1;
    end else begin
        grp_fu_121_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_134_ce = 1'b1;
    end else begin
        grp_fu_134_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_199_ce = 1'b1;
    end else begin
        grp_fu_199_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_294_ce = 1'b1;
    end else begin
        grp_fu_294_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7)))) begin
        grp_fu_333_ce = 1'b1;
    end else begin
        grp_fu_333_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8)))) begin
        grp_fu_413_ce = 1'b1;
    end else begin
        grp_fu_413_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9)))) begin
        grp_fu_452_ce = 1'b1;
    end else begin
        grp_fu_452_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_514_ce = 1'b1;
    end else begin
        grp_fu_514_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11)))) begin
        grp_fu_594_ce = 1'b1;
    end else begin
        grp_fu_594_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12)))) begin
        grp_fu_649_ce = 1'b1;
    end else begin
        grp_fu_649_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))))) begin
        grp_fu_90_ce = 1'b1;
    end else begin
        grp_fu_90_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (1'b1 == ap_ce))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1245_1_fu_605_p2 = ($signed(sext_ln1245_fu_602_p1) + $signed(sext_ln712_4_fu_599_p1));

assign add_ln1245_2_fu_736_p2 = ($signed(sub_ln1246_2_reg_1285) + $signed(sext_ln712_6_fu_733_p1));

assign add_ln1245_3_fu_848_p2 = ($signed(sext_ln1245_1_fu_845_p1) + $signed(sext_ln712_7_fu_842_p1));

assign add_ln1245_fu_461_p2 = ($signed(sub_ln1246_1_reg_1145) + $signed(sext_ln712_3_fu_458_p1));

assign add_ln712_1_fu_619_p2 = ($signed(trunc_ln1245_3_reg_1226) + $signed(select_ln384_5_reg_1119));

assign add_ln712_2_fu_749_p2 = ($signed(trunc_ln1245_4_reg_1290) + $signed(select_ln384_1_reg_1215));

assign add_ln712_3_fu_862_p2 = ($signed(trunc_ln1245_5_reg_1338) + $signed(select_ln384_8_reg_1279));

assign add_ln712_fu_474_p2 = ($signed(trunc_ln1245_2_reg_1150) + $signed(select_ln384_3_reg_1063));

assign and_ln794_10_fu_669_p2 = (xor_ln794_11_fu_664_p2 & or_ln794_4_fu_659_p2);

assign and_ln794_11_fu_786_p2 = (xor_ln794_2_fu_781_p2 & or_ln794_2_fu_776_p2);

assign and_ln794_12_fu_899_p2 = (xor_ln794_12_fu_894_p2 & or_ln794_5_fu_889_p2);

assign and_ln794_8_fu_356_p2 = (xor_ln794_10_fu_351_p2 & or_ln794_3_fu_346_p2);

assign and_ln794_9_fu_535_p2 = (xor_ln794_1_fu_530_p2 & or_ln794_1_fu_525_p2);

assign and_ln794_fu_223_p2 = (xor_ln794_fu_218_p2 & or_ln794_fu_213_p2);

assign and_ln795_10_fu_378_p2 = (tmp_25_reg_1091 & or_ln795_2_fu_372_p2);

assign and_ln795_11_fu_557_p2 = (tmp_27_reg_1175 & or_ln795_1_fu_551_p2);

assign and_ln795_12_fu_691_p2 = (tmp_29_reg_1241 & or_ln795_3_fu_685_p2);

assign and_ln795_13_fu_808_p2 = (tmp_31_reg_1300 & or_ln795_4_fu_802_p2);

assign and_ln795_14_fu_921_p2 = (tmp_33_reg_1343 & or_ln795_5_fu_915_p2);

assign and_ln795_fu_245_p2 = (tmp_23_reg_1020 & or_ln795_fu_239_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = select_ln384_10_reg_1328;

assign ap_return_1 = select_ln384_12_fu_940_p3;

assign grp_fu_121_p1 = sext_ln1169_reg_978;

assign grp_fu_134_p0 = sext_ln1171_reg_984;

assign grp_fu_333_p1 = sext_ln1169_1_reg_1074;

assign grp_fu_413_p0 = sext_ln1171_1_reg_1080;

assign grp_fu_594_p1 = sext_ln1169_2_reg_1203;

assign grp_fu_649_p0 = sext_ln1171_2_reg_1209;

assign icmp_ln777_1_fu_520_p2 = ((tmp_2_reg_1192 != 17'd0) ? 1'b1 : 1'b0);

assign icmp_ln777_2_fu_771_p2 = ((tmp_4_reg_1317 != 17'd0) ? 1'b1 : 1'b0);

assign icmp_ln777_3_fu_341_p2 = ((tmp_1_reg_1103 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln777_4_fu_654_p2 = ((tmp_3_reg_1258 != 17'd0) ? 1'b1 : 1'b0);

assign icmp_ln777_5_fu_884_p2 = ((tmp_5_reg_1360 != 17'd0) ? 1'b1 : 1'b0);

assign icmp_ln777_fu_208_p2 = ((tmp_reg_1032 != 17'd0) ? 1'b1 : 1'b0);

assign icmp_ln795_1_fu_546_p2 = ((tmp_2_reg_1192 != 17'd131071) ? 1'b1 : 1'b0);

assign icmp_ln795_2_fu_367_p2 = ((tmp_1_reg_1103 != 16'd65535) ? 1'b1 : 1'b0);

assign icmp_ln795_3_fu_680_p2 = ((tmp_3_reg_1258 != 17'd131071) ? 1'b1 : 1'b0);

assign icmp_ln795_4_fu_797_p2 = ((tmp_4_reg_1317 != 17'd131071) ? 1'b1 : 1'b0);

assign icmp_ln795_5_fu_910_p2 = ((tmp_5_reg_1360 != 17'd131071) ? 1'b1 : 1'b0);

assign icmp_ln795_fu_234_p2 = ((tmp_reg_1032 != 17'd131071) ? 1'b1 : 1'b0);

assign or_ln384_2_fu_391_p2 = (and_ln795_10_fu_378_p2 | and_ln794_8_fu_356_p2);

assign or_ln384_3_fu_570_p2 = (and_ln795_11_fu_557_p2 | and_ln794_9_fu_535_p2);

assign or_ln384_4_fu_704_p2 = (and_ln795_12_fu_691_p2 | and_ln794_10_fu_669_p2);

assign or_ln384_5_fu_821_p2 = (and_ln795_13_fu_808_p2 | and_ln794_11_fu_786_p2);

assign or_ln384_6_fu_934_p2 = (and_ln795_14_fu_921_p2 | and_ln794_12_fu_899_p2);

assign or_ln384_fu_258_p2 = (and_ln795_fu_245_p2 | and_ln794_fu_223_p2);

assign or_ln794_1_fu_525_p2 = (tmp_28_reg_1186 | icmp_ln777_1_fu_520_p2);

assign or_ln794_2_fu_776_p2 = (tmp_32_reg_1311 | icmp_ln777_2_fu_771_p2);

assign or_ln794_3_fu_346_p2 = (tmp_26_reg_1097 | icmp_ln777_3_fu_341_p2);

assign or_ln794_4_fu_659_p2 = (tmp_30_reg_1252 | icmp_ln777_4_fu_654_p2);

assign or_ln794_5_fu_889_p2 = (tmp_34_reg_1354 | icmp_ln777_5_fu_884_p2);

assign or_ln794_fu_213_p2 = (tmp_24_reg_1026 | icmp_ln777_fu_208_p2);

assign or_ln795_1_fu_551_p2 = (xor_ln795_1_fu_541_p2 | icmp_ln795_1_fu_546_p2);

assign or_ln795_2_fu_372_p2 = (xor_ln795_8_fu_362_p2 | icmp_ln795_2_fu_367_p2);

assign or_ln795_3_fu_685_p2 = (xor_ln795_9_fu_675_p2 | icmp_ln795_3_fu_680_p2);

assign or_ln795_4_fu_802_p2 = (xor_ln795_2_fu_792_p2 | icmp_ln795_4_fu_797_p2);

assign or_ln795_5_fu_915_p2 = (xor_ln795_10_fu_905_p2 | icmp_ln795_5_fu_910_p2);

assign or_ln795_fu_239_p2 = (xor_ln795_fu_229_p2 | icmp_ln795_fu_234_p2);

assign select_ln384_10_fu_827_p3 = ((or_ln384_5_fu_821_p2[0:0] == 1'b1) ? select_ln384_9_fu_813_p3 : add_ln712_2_reg_1306);

assign select_ln384_11_fu_926_p3 = ((and_ln794_12_fu_899_p2[0:0] == 1'b1) ? 64'd9223372036854775807 : 64'd9223372036854775808);

assign select_ln384_12_fu_940_p3 = ((or_ln384_6_fu_934_p2[0:0] == 1'b1) ? select_ln384_11_fu_926_p3 : add_ln712_3_reg_1349);

assign select_ln384_1_fu_576_p3 = ((or_ln384_3_fu_570_p2[0:0] == 1'b1) ? select_ln384_6_fu_562_p3 : add_ln712_reg_1181);

assign select_ln384_3_fu_264_p3 = ((or_ln384_fu_258_p2[0:0] == 1'b1) ? select_ln384_fu_250_p3 : trunc_ln1245_fu_205_p1);

assign select_ln384_4_fu_383_p3 = ((and_ln794_8_fu_356_p2[0:0] == 1'b1) ? 64'd9223372036854775807 : 64'd9223372036854775808);

assign select_ln384_5_fu_397_p3 = ((or_ln384_2_fu_391_p2[0:0] == 1'b1) ? select_ln384_4_fu_383_p3 : trunc_ln1245_1_fu_338_p1);

assign select_ln384_6_fu_562_p3 = ((and_ln794_9_fu_535_p2[0:0] == 1'b1) ? 64'd9223372036854775807 : 64'd9223372036854775808);

assign select_ln384_7_fu_696_p3 = ((and_ln794_10_fu_669_p2[0:0] == 1'b1) ? 64'd9223372036854775807 : 64'd9223372036854775808);

assign select_ln384_8_fu_710_p3 = ((or_ln384_4_fu_704_p2[0:0] == 1'b1) ? select_ln384_7_fu_696_p3 : add_ln712_1_reg_1247);

assign select_ln384_9_fu_813_p3 = ((and_ln794_11_fu_786_p2[0:0] == 1'b1) ? 64'd9223372036854775807 : 64'd9223372036854775808);

assign select_ln384_fu_250_p3 = ((and_ln794_fu_223_p2[0:0] == 1'b1) ? 64'd9223372036854775807 : 64'd9223372036854775808);

assign sext_ln1169_1_fu_282_p0 = lms_aux_reg_M_real_V_0;

assign sext_ln1169_1_fu_282_p1 = sext_ln1169_1_fu_282_p0;

assign sext_ln1169_2_fu_502_p0 = ap_port_reg_input_M_real;

assign sext_ln1169_2_fu_502_p1 = sext_ln1169_2_fu_502_p0;

assign sext_ln1169_fu_100_p0 = lms_aux_reg_M_real_V_1;

assign sext_ln1169_fu_100_p1 = sext_ln1169_fu_100_p0;

assign sext_ln1171_1_fu_290_p1 = $signed(lms_weights_real_V_1);

assign sext_ln1171_2_fu_510_p1 = $signed(lms_weights_real_V_0);

assign sext_ln1171_fu_108_p1 = $signed(lms_weights_real_V_2);

assign sext_ln1245_1_fu_845_p1 = sub_ln1245_2_reg_1333;

assign sext_ln1245_fu_602_p1 = sub_ln1245_1_reg_1221;

assign sext_ln1246_2_fu_421_p1 = $signed(sub_ln1171_1_reg_1135);

assign sext_ln1246_3_fu_720_p1 = $signed(sub_ln1171_2_reg_1274);

assign sext_ln1246_fu_142_p1 = $signed(sub_ln1171_reg_1010);

assign sext_ln712_2_fu_418_p1 = $signed(mul_ln1171_4_reg_1125);

assign sext_ln712_3_fu_458_p1 = select_ln384_3_reg_1063;

assign sext_ln712_4_fu_599_p1 = select_ln384_5_reg_1119;

assign sext_ln712_5_fu_717_p1 = $signed(mul_ln1171_8_reg_1264);

assign sext_ln712_6_fu_733_p1 = select_ln384_1_reg_1215;

assign sext_ln712_7_fu_842_p1 = select_ln384_8_reg_1279;

assign sext_ln712_fu_139_p1 = $signed(mul_ln1171_reg_1000);

assign sub_ln1171_1_fu_408_p2 = (79'd0 - mul_ln1171_5_reg_1114);

assign sub_ln1171_2_fu_644_p2 = (79'd0 - mul_ln1171_9_reg_1236);

assign sub_ln1171_fu_129_p2 = (79'd0 - mul_ln1171_1_reg_995);

assign sub_ln1245_1_fu_583_p2 = (mul_ln1171_7_reg_1198 - mul_ln1171_6_reg_1155);

assign sub_ln1245_2_fu_834_p2 = (mul_ln1171_11_reg_1323 - mul_ln1171_10_reg_1295);

assign sub_ln1245_fu_300_p2 = (mul_ln1171_3_reg_1069 - mul_ln1171_2_reg_1038);

assign sub_ln1246_1_fu_424_p2 = ($signed(sext_ln712_2_fu_418_p1) - $signed(sext_ln1246_2_fu_421_p1));

assign sub_ln1246_2_fu_723_p2 = ($signed(sext_ln712_5_fu_717_p1) - $signed(sext_ln1246_3_fu_720_p1));

assign sub_ln1246_fu_145_p2 = ($signed(sext_ln712_fu_139_p1) - $signed(sext_ln1246_fu_142_p1));

assign trunc_ln1245_1_fu_338_p1 = sub_ln1245_reg_1086[63:0];

assign trunc_ln1245_2_fu_430_p1 = sub_ln1246_1_fu_424_p2[63:0];

assign trunc_ln1245_3_fu_587_p1 = sub_ln1245_1_fu_583_p2[63:0];

assign trunc_ln1245_4_fu_729_p1 = sub_ln1246_2_fu_723_p2[63:0];

assign trunc_ln1245_5_fu_838_p1 = sub_ln1245_2_fu_834_p2[63:0];

assign trunc_ln1245_fu_205_p1 = sub_ln1246_reg_1015[63:0];

assign xor_ln794_10_fu_351_p2 = (tmp_25_reg_1091 ^ 1'd1);

assign xor_ln794_11_fu_664_p2 = (tmp_29_reg_1241 ^ 1'd1);

assign xor_ln794_12_fu_894_p2 = (tmp_33_reg_1343 ^ 1'd1);

assign xor_ln794_1_fu_530_p2 = (tmp_27_reg_1175 ^ 1'd1);

assign xor_ln794_2_fu_781_p2 = (tmp_31_reg_1300 ^ 1'd1);

assign xor_ln794_fu_218_p2 = (tmp_23_reg_1020 ^ 1'd1);

assign xor_ln795_10_fu_905_p2 = (tmp_34_reg_1354 ^ 1'd1);

assign xor_ln795_1_fu_541_p2 = (tmp_28_reg_1186 ^ 1'd1);

assign xor_ln795_2_fu_792_p2 = (tmp_32_reg_1311 ^ 1'd1);

assign xor_ln795_8_fu_362_p2 = (tmp_26_reg_1097 ^ 1'd1);

assign xor_ln795_9_fu_675_p2 = (tmp_30_reg_1252 ^ 1'd1);

assign xor_ln795_fu_229_p2 = (tmp_24_reg_1026 ^ 1'd1);

endmodule //nlms_module_filter_fix
